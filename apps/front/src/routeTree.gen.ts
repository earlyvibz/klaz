/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as DashboardUsersRouteImport } from './routes/_dashboard.users'
import { Route as DashboardSchoolsRouteImport } from './routes/_dashboard.schools'
import { Route as DashboardQuestsRouteImport } from './routes/_dashboard.quests'
import { Route as DashboardHomeRouteImport } from './routes/_dashboard.home'
import { Route as DashboardAccountRouteImport } from './routes/_dashboard.account'

const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const DashboardUsersRoute = DashboardUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSchoolsRoute = DashboardSchoolsRouteImport.update({
  id: '/schools',
  path: '/schools',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardQuestsRoute = DashboardQuestsRouteImport.update({
  id: '/quests',
  path: '/quests',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardHomeRoute = DashboardHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAccountRoute = DashboardAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/account': typeof DashboardAccountRoute
  '/home': typeof DashboardHomeRoute
  '/quests': typeof DashboardQuestsRoute
  '/schools': typeof DashboardSchoolsRoute
  '/users': typeof DashboardUsersRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/account': typeof DashboardAccountRoute
  '/home': typeof DashboardHomeRoute
  '/quests': typeof DashboardQuestsRoute
  '/schools': typeof DashboardSchoolsRoute
  '/users': typeof DashboardUsersRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/account': typeof DashboardAccountRoute
  '/_dashboard/home': typeof DashboardHomeRoute
  '/_dashboard/quests': typeof DashboardQuestsRoute
  '/_dashboard/schools': typeof DashboardSchoolsRoute
  '/_dashboard/users': typeof DashboardUsersRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/account'
    | '/home'
    | '/quests'
    | '/schools'
    | '/users'
    | '/auth/login'
    | '/auth/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/account'
    | '/home'
    | '/quests'
    | '/schools'
    | '/users'
    | '/auth/login'
    | '/auth/signup'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/_dashboard'
    | '/_dashboard/account'
    | '/_dashboard/home'
    | '/_dashboard/quests'
    | '/_dashboard/schools'
    | '/_dashboard/users'
    | '/auth/login'
    | '/auth/signup'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_dashboard/users': {
      id: '/_dashboard/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof DashboardUsersRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/schools': {
      id: '/_dashboard/schools'
      path: '/schools'
      fullPath: '/schools'
      preLoaderRoute: typeof DashboardSchoolsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/quests': {
      id: '/_dashboard/quests'
      path: '/quests'
      fullPath: '/quests'
      preLoaderRoute: typeof DashboardQuestsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/home': {
      id: '/_dashboard/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof DashboardHomeRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/account': {
      id: '/_dashboard/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof DashboardAccountRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardRouteChildren {
  DashboardAccountRoute: typeof DashboardAccountRoute
  DashboardHomeRoute: typeof DashboardHomeRoute
  DashboardQuestsRoute: typeof DashboardQuestsRoute
  DashboardSchoolsRoute: typeof DashboardSchoolsRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAccountRoute: DashboardAccountRoute,
  DashboardHomeRoute: DashboardHomeRoute,
  DashboardQuestsRoute: DashboardQuestsRoute,
  DashboardSchoolsRoute: DashboardSchoolsRoute,
  DashboardUsersRoute: DashboardUsersRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
