/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as DashboardPurchasesRouteImport } from './routes/_dashboard.purchases'
import { Route as DashboardMarketplaceRouteImport } from './routes/_dashboard.marketplace'
import { Route as DashboardHomeRouteImport } from './routes/_dashboard.home'
import { Route as DashboardClaimsRouteImport } from './routes/_dashboard.claims'
import { Route as DashboardQuestsRejectedRouteImport } from './routes/_dashboard.quests.rejected'
import { Route as DashboardQuestsPendingRouteImport } from './routes/_dashboard.quests.pending'
import { Route as DashboardQuestsApprovedRouteImport } from './routes/_dashboard.quests.approved'

const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const DashboardPurchasesRoute = DashboardPurchasesRouteImport.update({
  id: '/purchases',
  path: '/purchases',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardMarketplaceRoute = DashboardMarketplaceRouteImport.update({
  id: '/marketplace',
  path: '/marketplace',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardHomeRoute = DashboardHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardClaimsRoute = DashboardClaimsRouteImport.update({
  id: '/claims',
  path: '/claims',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardQuestsRejectedRoute = DashboardQuestsRejectedRouteImport.update({
  id: '/quests/rejected',
  path: '/quests/rejected',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardQuestsPendingRoute = DashboardQuestsPendingRouteImport.update({
  id: '/quests/pending',
  path: '/quests/pending',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardQuestsApprovedRoute = DashboardQuestsApprovedRouteImport.update({
  id: '/quests/approved',
  path: '/quests/approved',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/claims': typeof DashboardClaimsRoute
  '/home': typeof DashboardHomeRoute
  '/marketplace': typeof DashboardMarketplaceRoute
  '/purchases': typeof DashboardPurchasesRoute
  '/auth/login': typeof AuthLoginRoute
  '/quests/approved': typeof DashboardQuestsApprovedRoute
  '/quests/pending': typeof DashboardQuestsPendingRoute
  '/quests/rejected': typeof DashboardQuestsRejectedRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/claims': typeof DashboardClaimsRoute
  '/home': typeof DashboardHomeRoute
  '/marketplace': typeof DashboardMarketplaceRoute
  '/purchases': typeof DashboardPurchasesRoute
  '/auth/login': typeof AuthLoginRoute
  '/quests/approved': typeof DashboardQuestsApprovedRoute
  '/quests/pending': typeof DashboardQuestsPendingRoute
  '/quests/rejected': typeof DashboardQuestsRejectedRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/claims': typeof DashboardClaimsRoute
  '/_dashboard/home': typeof DashboardHomeRoute
  '/_dashboard/marketplace': typeof DashboardMarketplaceRoute
  '/_dashboard/purchases': typeof DashboardPurchasesRoute
  '/auth/login': typeof AuthLoginRoute
  '/_dashboard/quests/approved': typeof DashboardQuestsApprovedRoute
  '/_dashboard/quests/pending': typeof DashboardQuestsPendingRoute
  '/_dashboard/quests/rejected': typeof DashboardQuestsRejectedRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/claims'
    | '/home'
    | '/marketplace'
    | '/purchases'
    | '/auth/login'
    | '/quests/approved'
    | '/quests/pending'
    | '/quests/rejected'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/claims'
    | '/home'
    | '/marketplace'
    | '/purchases'
    | '/auth/login'
    | '/quests/approved'
    | '/quests/pending'
    | '/quests/rejected'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/_dashboard'
    | '/_dashboard/claims'
    | '/_dashboard/home'
    | '/_dashboard/marketplace'
    | '/_dashboard/purchases'
    | '/auth/login'
    | '/_dashboard/quests/approved'
    | '/_dashboard/quests/pending'
    | '/_dashboard/quests/rejected'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_dashboard/purchases': {
      id: '/_dashboard/purchases'
      path: '/purchases'
      fullPath: '/purchases'
      preLoaderRoute: typeof DashboardPurchasesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/marketplace': {
      id: '/_dashboard/marketplace'
      path: '/marketplace'
      fullPath: '/marketplace'
      preLoaderRoute: typeof DashboardMarketplaceRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/home': {
      id: '/_dashboard/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof DashboardHomeRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/claims': {
      id: '/_dashboard/claims'
      path: '/claims'
      fullPath: '/claims'
      preLoaderRoute: typeof DashboardClaimsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/quests/rejected': {
      id: '/_dashboard/quests/rejected'
      path: '/quests/rejected'
      fullPath: '/quests/rejected'
      preLoaderRoute: typeof DashboardQuestsRejectedRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/quests/pending': {
      id: '/_dashboard/quests/pending'
      path: '/quests/pending'
      fullPath: '/quests/pending'
      preLoaderRoute: typeof DashboardQuestsPendingRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/quests/approved': {
      id: '/_dashboard/quests/approved'
      path: '/quests/approved'
      fullPath: '/quests/approved'
      preLoaderRoute: typeof DashboardQuestsApprovedRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardRouteChildren {
  DashboardClaimsRoute: typeof DashboardClaimsRoute
  DashboardHomeRoute: typeof DashboardHomeRoute
  DashboardMarketplaceRoute: typeof DashboardMarketplaceRoute
  DashboardPurchasesRoute: typeof DashboardPurchasesRoute
  DashboardQuestsApprovedRoute: typeof DashboardQuestsApprovedRoute
  DashboardQuestsPendingRoute: typeof DashboardQuestsPendingRoute
  DashboardQuestsRejectedRoute: typeof DashboardQuestsRejectedRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardClaimsRoute: DashboardClaimsRoute,
  DashboardHomeRoute: DashboardHomeRoute,
  DashboardMarketplaceRoute: DashboardMarketplaceRoute,
  DashboardPurchasesRoute: DashboardPurchasesRoute,
  DashboardQuestsApprovedRoute: DashboardQuestsApprovedRoute,
  DashboardQuestsPendingRoute: DashboardQuestsPendingRoute,
  DashboardQuestsRejectedRoute: DashboardQuestsRejectedRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
