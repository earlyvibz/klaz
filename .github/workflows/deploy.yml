name: Deploy

on:
  push:
    branches: [dev, staging, main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/earlyvibz/klaz/backend
  IMAGE_NAME_FRONTEND: ghcr.io/earlyvibz/klaz/frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      VITE_API_URL_DEV: https://api.klaz-dev.fr
      VITE_API_URL_STAGING: https://api.klaz-staging.fr
      VITE_API_URL_PROD: https://api.klaz.fr

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Set environment tag
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "env=prod" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "tag=staging" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/dev' ]]; then
            echo "tag=dev" >> $GITHUB_OUTPUT
            echo "env=dev" >> $GITHUB_OUTPUT
          fi

      - name: Setup environment for Tuyau generation
        working-directory: ./apps/backend
        run: cp .env.example .env

      - name: Run backend tests
        working-directory: ./apps/backend
        env:
          NODE_ENV: test
          DOMAIN: localhost
          PORT: 3333
          APP_KEY: test-app-key-for-ci-only-do-not-use-in-production
          HOST: 0.0.0.0
          LOG_LEVEL: info
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test
          DB_PASSWORD: test
          DB_DATABASE: test
          LIMITER_STORE: memory
          SENTRY_DSN: ""
          SESSION_DRIVER: memory
          DRIVE_DISK: local
          R2_KEY: ""
          R2_SECRET: ""
          R2_BUCKET: ""
          R2_ENDPOINT: ""
        run: node ace test

      - name: Create environment-specific .env for frontend
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "VITE_API_URL=${{ env.VITE_API_URL_PROD }}" > apps/front/.env
          elif [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "VITE_API_URL=${{ env.VITE_API_URL_STAGING }}" > apps/front/.env.staging
          elif [[ ${{ github.ref }} == 'refs/heads/dev' ]]; then
            echo "VITE_API_URL=${{ env.VITE_API_URL_DEV }}" > apps/front/.env
          fi

      - name: Build project with correct environment
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            pnpm deploy:clean && pnpm deploy:build && pnpm deploy:backend && pnpm deploy:frontend && cd .deploy/frontend && pnpm build && cd ../.. && pnpm deploy:dockerfiles
          elif [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            pnpm deploy:clean && pnpm deploy:build && pnpm deploy:backend && pnpm deploy:frontend && cd .deploy/frontend && pnpm build:staging && cd ../.. && pnpm deploy:dockerfiles
          else
            pnpm deploy:all
          fi

      - name: Cleanup temporary .env files
        run: |
          rm -f apps/backend/.env
          rm -f apps/front/.env*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .deploy/backend
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:${{ steps.env.outputs.tag }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .deploy/frontend
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.env.outputs.tag }}

      - name: Trigger Coolify DEV deployments
        if: steps.env.outputs.env == 'dev'
        run: |
          echo "Triggering DEV deployments"
          echo "Backend image: ${{ env.IMAGE_NAME_BACKEND }}:${{ steps.env.outputs.tag }}"
          echo "Frontend image: ${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.env.outputs.tag }}"

          # Déclencher le redéploiement backend DEV (méthode officielle)
          echo "Deploying backend..."
          curl --request GET "${{ secrets.COOLIFY_WEBHOOK_BACKEND_DEV }}" \
            --header "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}"

          # Déclencher le redéploiement frontend DEV
          echo "Deploying frontend..."
          curl --request GET "${{ secrets.COOLIFY_WEBHOOK_FRONT_DEV }}" \
            --header "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}"

      - name: Other environments (staging/prod)
        if: steps.env.outputs.env != 'dev'
        run: |
          echo "Images pushed for ${{ steps.env.outputs.env }} environment:"
          echo "Backend: ${{ env.IMAGE_NAME_BACKEND }}:${{ steps.env.outputs.tag }}"
          echo "Frontend: ${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.env.outputs.tag }}"
          echo "Configure webhooks in Coolify for these environments manually"
