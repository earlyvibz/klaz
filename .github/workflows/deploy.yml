name: Deploy

on:
  push:
    branches: [dev, staging, main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/earlyvibz/klaz/backend
  IMAGE_NAME_FRONTEND: ghcr.io/earlyvibz/klaz/frontend
  NODE_VERSION: "20"
  PNPM_VERSION: "latest"

jobs:
  # Job s√©par√© pour les tests (r√©utilise la logique CI)
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 8

    env:
      NODE_ENV: test
      DOMAIN: localhost
      PORT: 3333
      APP_KEY: test-key-that-is-32-characters-
      HOST: 0.0.0.0
      LOG_LEVEL: info
      SESSION_DRIVER: memory
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: klaz_test
      LIMITER_STORE: memory
      RESEND_API_KEY: test-resend-api-key
      FRONTEND_URL: http://localhost:3000
      SENTRY_DSN: ""
      DRIVE_DISK: local
      R2_KEY: ""
      R2_SECRET: ""
      R2_BUCKET: ""
      R2_ENDPOINT: ""

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: klaz_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate APP_KEY
        working-directory: ./apps/backend
        run: node ace generate:key

      - name: Run migrations
        working-directory: ./apps/backend
        run: node ace migration:run

      - name: Run tests
        run: |
          pnpm --filter @klaz/backend test
          pnpm --filter front test:run

  # Job principal de d√©ploiement
  deploy:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write

    outputs:
      tag: ${{ steps.env.outputs.tag }}
      environment: ${{ steps.env.outputs.env }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: env
        run: |
          case "${{ github.ref }}" in
            "refs/heads/main")
              echo "tag=latest" >> $GITHUB_OUTPUT
              echo "env=prod" >> $GITHUB_OUTPUT
              echo "api_url=https://api.klaz.fr" >> $GITHUB_OUTPUT
              echo "build_mode=production" >> $GITHUB_OUTPUT
              ;;
            "refs/heads/staging")
              echo "tag=staging" >> $GITHUB_OUTPUT
              echo "env=staging" >> $GITHUB_OUTPUT
              echo "api_url=https://api.klaz-staging.fr" >> $GITHUB_OUTPUT
              echo "build_mode=staging" >> $GITHUB_OUTPUT
              ;;
            "refs/heads/dev")
              echo "tag=dev" >> $GITHUB_OUTPUT
              echo "env=dev" >> $GITHUB_OUTPUT
              echo "api_url=https://api.klaz-dev.fr" >> $GITHUB_OUTPUT
              echo "build_mode=development" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup backend env for Tuyau
        working-directory: ./apps/backend
        run: |
          cat > .env << EOF
          NODE_ENV=development
          DOMAIN=localhost
          PORT=3333
          APP_KEY=temp-key-for-build-only-32-chars
          HOST=0.0.0.0
          LOG_LEVEL=info
          SESSION_DRIVER=memory
          DB_HOST=localhost
          DB_PORT=5432
          DB_USER=postgres
          DB_PASSWORD=postgres
          DB_DATABASE=klaz_build
          LIMITER_STORE=memory
          SENTRY_DSN=""
          DRIVE_DISK=local
          RESEND_API_KEY=temp-key
          FRONTEND_URL=http://localhost:3000
          EOF

      - name: Setup frontend env
        working-directory: ./apps/front
        run: echo "VITE_API_URL=${{ steps.env.outputs.api_url }}" > .env

      - name: Build and deploy
        run: |
          pnpm deploy:clean
          pnpm deploy:build
          pnpm deploy:backend
          pnpm deploy:frontend
          cd .deploy/frontend && pnpm build
          cd ../.. && pnpm deploy:dockerfiles

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .deploy/backend
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:${{ steps.env.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .deploy/frontend
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.env.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job de d√©ploiement automatique (DEV uniquement)
  deploy-dev:
    needs: deploy
    if: needs.deploy.outputs.environment == 'dev'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Trigger Coolify DEV deployments
        run: |
          echo "üöÄ Deploying to DEV environment"
          echo "Backend: ${{ env.IMAGE_NAME_BACKEND }}:${{ needs.deploy.outputs.tag }}"
          echo "Frontend: ${{ env.IMAGE_NAME_FRONTEND }}:${{ needs.deploy.outputs.tag }}"

          # Deploy backend
          curl -f --request GET "${{ secrets.COOLIFY_WEBHOOK_BACKEND_DEV }}" \
            --header "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
            --max-time 30

          # Deploy frontend
          curl -f --request GET "${{ secrets.COOLIFY_WEBHOOK_FRONT_DEV }}" \
            --header "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
            --max-time 30

          echo "‚úÖ DEV deployment triggered successfully"

  # Job d'information pour staging/prod
  notify-manual:
    needs: deploy
    if: needs.deploy.outputs.environment != 'dev'
    runs-on: ubuntu-latest

    steps:
      - name: Manual deployment info
        run: |
          echo "üì¶ Images built for ${{ needs.deploy.outputs.environment }} environment:"
          echo "Backend: ${{ env.IMAGE_NAME_BACKEND }}:${{ needs.deploy.outputs.tag }}"
          echo "Frontend: ${{ env.IMAGE_NAME_FRONTEND }}:${{ needs.deploy.outputs.tag }}"
          echo "‚ö†Ô∏è  Manual deployment required via Coolify dashboard"
